/*
 * exam.c
 *
 *  Created on: 2022年6月16日
 *      Author: 26254
 */
#include "xparameters.h"
#include "stdio.h"
#include "xtmrctr_l.h"
#include "xintc_l.h"
#include "xil_io.h"
#include "xgpio.h"
#include "xil_exception.h"
#define RESET_VALUE   100000
void My_ISR()__attribute__((interrupt_handler));
char setcode[8]={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};
char code[16]={0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x98,0x88,0x83,0xc6,0xa1,0x86,0x8e};
short pos=0xff7f;
int data;
void time_handle();
void button_handle();
void display();
void display_L();
int a;
int poc=0x80;
int now_pos=0;
int main()
{
	//GPIO输入输出配置
	Xil_Out32(XPAR_AXI_GPIO_2_BASEADDR+XGPIO_TRI_OFFSET,0xffffffff);
	Xil_Out32(XPAR_AXI_GPIO_1_BASEADDR+XGPIO_TRI_OFFSET,0x00000000);
	Xil_Out32(XPAR_AXI_GPIO_1_BASEADDR+XGPIO_TRI2_OFFSET,0x00000000);
	//GPIO中断使能
	Xil_Out32(XPAR_AXI_GPIO_2_BASEADDR+XGPIO_ISR_OFFSET,XGPIO_IR_CH1_MASK);
	Xil_Out32(XPAR_AXI_GPIO_2_BASEADDR+XGPIO_IER_OFFSET,XGPIO_IR_CH1_MASK);
	Xil_Out32(XPAR_AXI_GPIO_2_BASEADDR+XGPIO_GIE_OFFSET,XGPIO_GIE_GINTR_ENABLE_MASK);
	//初始化T0
	Xil_Out32(XPAR_AXI_TIMER_0_BASEADDR+XTC_TCSR_OFFSET,Xil_In32(XPAR_AXI_TIMER_0_BASEADDR+XTC_TCSR_OFFSET)&~XTC_CSR_ENABLE_TMR_MASK);
	Xil_Out32(XPAR_AXI_TIMER_0_BASEADDR+XTC_TLR_OFFSET,RESET_VALUE);
	Xil_Out32(XPAR_AXI_TIMER_0_BASEADDR+XTC_TCSR_OFFSET,Xil_In32(XPAR_AXI_TIMER_0_BASEADDR+XTC_TCSR_OFFSET)|XTC_CSR_LOAD_MASK);
	Xil_Out32(XPAR_AXI_TIMER_0_BASEADDR+XTC_TCSR_OFFSET,(Xil_In32(XPAR_AXI_TIMER_0_BASEADDR+XTC_TCSR_OFFSET)&~XTC_CSR_LOAD_MASK)\
			|XTC_CSR_ENABLE_TMR_MASK|XTC_CSR_AUTO_RELOAD_MASK|XTC_CSR_ENABLE_INT_MASK|XTC_CSR_DOWN_COUNT_MASK);
	//初始化INTC，使能中断
	Xil_Out32(XPAR_INTC_SINGLE_BASEADDR+XIN_IAR_OFFSET,/*XPAR_AXI_GPIO_2_IP2INTC_IRPT_MASK|XPAR_AXI_TIMER_0_INTERRUPT_MASK*/0x6);
	//Xil_Out32(XPAR_INTC_SINGLE_BASEADDR+XIN_IMR_OFFSET,XPAR_AXI_GPIO_2_IP2INTC_IRPT_MASK|XPAR_AXI_TIMER_0_INTERRUPT_MASK);
	Xil_Out32(XPAR_INTC_SINGLE_BASEADDR+XIN_IER_OFFSET,/*XPAR_AXI_GPIO_2_IP2INTC_IRPT_MASK|XPAR_AXI_TIMER_0_INTERRUPT_MASK*/0x6);
	Xil_Out32(XPAR_INTC_SINGLE_BASEADDR+XIN_MER_OFFSET,/*XPAR_AXI_GPIO_2_IP2INTC_IRPT_MASK|XPAR_AXI_TIMER_0_INTERRUPT_MASK*/0x3);
	microblaze_enable_interrupts();
	return 0;
}
void My_ISR()
{
	int status;
	   status=Xil_In32(XPAR_INTC_0_BASEADDR+XIN_ISR_OFFSET);//读取ISR
	     if((status&XPAR_AXI_TIMER_0_INTERRUPT_MASK)==XPAR_AXI_TIMER_0_INTERRUPT_MASK)
	    	 time_handle() ;//调用用户中断服务程序
	     if((status&XPAR_AXI_GPIO_2_IP2INTC_IRPT_MASK)==XPAR_AXI_GPIO_2_IP2INTC_IRPT_MASK)
	    	  button_handle();//调用按键中断
	      Xil_Out32(XPAR_INTC_0_BASEADDR+XIN_IAR_OFFSET,status);//写IAR
}
//定时器中断服务程序（动态显示）
void time_handle()
{
	int i,j;
	for(i=0;i<8;i++)
		{
			Xil_Out8(XPAR_AXI_GPIO_1_BASEADDR+XGPIO_DATA2_OFFSET,setcode[i]);
			Xil_Out8(XPAR_AXI_GPIO_1_BASEADDR+XGPIO_DATA_OFFSET,pos);
			for(j=0;j<1000;j++);
				pos=pos>>1;
		}
	pos=0xff7f;
	Xil_Out32(XPAR_AXI_TIMER_0_BASEADDR+XTC_TIMER_COUNTER_OFFSET+XTC_TCSR_OFFSET,Xil_In32(XPAR_AXI_TIMER_0_BASEADDR+XTC_TIMER_COUNTER_OFFSET+XTC_TCSR_OFFSET));
}
//按键中断服务程序
void button_handle()
{
	char button;
	while((Xil_In8(XPAR_AXI_GPIO_2_BASEADDR+XGPIO_DATA_OFFSET)&0x1f)!=0)//检测是否有按键按下
			{
				button=Xil_In8(XPAR_AXI_GPIO_2_BASEADDR+XGPIO_DATA_OFFSET)&0x1f;
				while((Xil_In8(XPAR_AXI_GPIO_2_BASEADDR+XGPIO_DATA_OFFSET)&0x1f)!=0);//等到按键释放
				data=Xil_In16(XPAR_AXI_GPIO_0_BASEADDR+XGPIO_DATA_OFFSET)&0x0000ffff;
//				xil_printf("%x\n",button);
				switch(button)//按键编码
				{
                    case 0x10:display();break;
                    case 0x2:display_L();break;
                    default:break;
				}
			}
	Xil_Out32(XPAR_AXI_GPIO_2_BASEADDR+XGPIO_ISR_OFFSET,Xil_In32(XPAR_AXI_GPIO_2_BASEADDR+XGPIO_ISR_OFFSET));
}
void display()
{
	int b,key;
	int pou=0xf;
	for(b=0;b<now_pos;b++)
	{
		setcode[7-b]=0xff;
	}
	for(b=now_pos+4;b<8;b++)
	{
		setcode[7-b]=0xff;
	}
	for(b=now_pos;b<4+now_pos;b++)
	{
		key=(data&pou)>>(4*b);
		setcode[7-b]=code[key];
		pou=pou<<4;
	}
	for(b=0;b<7;b++)
	{
		xil_printf("setcode[%d]:%x\n",b,setcode[b]);
	}
}
void display_L()
{
	now_pos++;
	if(now_pos==8)
	{
		now_pos=0;
	}
	xil_printf("now_pos:%x\n",now_pos);
	int temp=setcode[0];
	int i=0;
	for(i=0;i<7;i++)
	{
		setcode[i]=setcode[i+1];
	}
	setcode[7]=temp;
}
